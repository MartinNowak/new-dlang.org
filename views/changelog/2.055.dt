extends base_changelog

append new_features
    ul
        li
            | Added
            a(href="http://www.digitalmars.com/ctg/dman.html") dman
        li Add support for Mac OS X 10.7 Lion
        li Add protection to json output
        li Add SSE4.1 and SSE4.2 assembly instructions
        - bugItem(4375, "Require explicit braces when 'else' is ambiguous");
        li std.algorithm.copy now specializes on arrays for 10-80x improved performance.
        li std.path has been rewritten from scratch and has a completely new API.
        li
            | std.utf.toUTFz allows you to get a zero-terminated string of
            | any character type and of any type of mutability.
        li Added symlink and readLink to std.file for Posix systems.
        li Values for GDC and LDC were added to std.compiler.Vendor.
        li Added functions to std.bitswap for generically handling swapping endianness.
        li Added std.parallelism.TaskPool.workerIndex.
        li Added buffer recycling overload of std.parallelism.asyncBuf
        li
            | std.math.tgamma, lgamma, erf, and erfc are now deprecated.
            | The equivalent functions in std.mathspecial should be used
            | instead.
        li
            | The names of the values of std.mmfile.Mode, std.system.Endian,
            | std.traits.FunctionAttributes, std.traits.ParameterStorageClass,
            | and std.traits.Variadic were changed to match Phobos' naming
            | conventions.
        li std.range: Added indexed and chunks
        li
            | std.string.translate has been updated to work with unicode.
            | As a result, its signature has been changed. The old version
            | and std.string.maketrans have been scheduled for deprecation.
        li
            | std.string.tr has been updated so that it works with any
            | string type.
        li std.conv.parse works for associative array and static array
        li
            | std.format: Improvement of formatValue and unformatValue.
            | They now works for associative array, consider element escaping,
            | and treat range format spec more properly.
        li std.complex: added sin(), cos(), sqrt()
        li md5: 1.4X speedup

append druntime_bugs_fixed
    ul
        - bugItem(5967, "Mangling of ArgClose for variadic function is swapped");
        - bugItem(6493, "Source code for the doc of core.time points to std.datetime.");
        - bugItem(6466, "core.demangle incorrect demangling of variables");

append library_bugs_fixed
    ul
        li Unlisted bug: std.range.transversal should have length
        - bugItem(3890, "Bad writeln of a nested struct");
        - bugItem(4500, "scoped moves class after calling the constructor");
        - bugItem(4977, "cannot use nothrow or pure with Rebindable");
        - bugItem(5237, "writefln doesn't respect Complex.toString");
        - bugItem(5645, "std.range.drop()");
        - bugItem(5825, "write is calling a deprecated function");
        - bugItem(6040, "std.cpuid and core.cpuid return different values for some methods");
        - bugItem(6064, "std.array.join is unnecssarily slow for strings");
        - bugItem(6194, "[GSoC] Destructor gets called on object before it is copied when calling writeln()");
        - bugItem(6261, "[2.054 beta regression] Regex cannot take a char[]");
        - bugItem(6301, "Cannot 'zip'/'retro'/'stride' etc. a range having 'ulong' length.");
        - bugItem(6377, "std.conv.to should check range when changing signedness");
        - bugItem(6424, "std.traits.hasElaborateAssign is limited");
        - bugItem(6448, "writef(\"%05d\", BigInt) problem");
        - bugItem(6514, "CTFE dot product");
        - bugItem(6587, "std.parallelism's Task cannot handle immutable values");
        - bugItem(6606, "RefCounted doesn't work with unions due to use of format");
        - bugItem(6608, "Tuple field is not escaped");

append dmd_bugs_fixed
    ul
        - bugItem(1471, "Linker error on template function. Error 42: Symbol Undefined ...");
        - bugItem(1567, "call to private super-constructor should not be allowed");
        - bugItem(1684, "offsetof does not work, adding cast is workaround");
        - bugItem(1904, "wrong protection lookup for private template functions");
        - bugItem(2156, "[] and null should be accepted where a compile-time string is required");
        - bugItem(2234, "__traits(allMembers) returns incorrect results for mixin and template alias members of an aggregate");
        - bugItem(2245, "Bug with overloaded, mixin template functions in classes");
        - bugItem(2246, "Regression(2.046, 1.061): Specialization of template to template containing int arguments fails");
        - bugItem(2540, "super can not be using in alias statement");
        - bugItem(2634, "Function literals are non-constant.");
        - bugItem(2355, "is() doesn't resolve aliases before template matching");
        - bugItem(2579, "Template function accepting a delegate with in argument doesn't compile");
        - bugItem(2774, "Functions-as-properties makes it impossible to get the .mangleof a function");
        - bugItem(2777, "alias this doesn't forward __dollar and slice op.");
        - bugItem(2781, "alias this doesn't work with foreach");
        - bugItem(2787, "Members found in an 'alias this' are not implicitly accessible in methods");
        - bugItem(2941, "Wrong code for inline asm because CPU type is set too late");
        - bugItem(3268, "can't compare pointer to functions when one is const");
        - bugItem(3273, "Regression(2.031): struct invariant + dtor fails to compile (no line number)");
        - bugItem(3512, "dchar iteration over string in CTFE fails");
        - bugItem(3661, "^^ not supported in array operations.");
        - bugItem(3797, "Regression(2.038): Implicit conversion between incompatible function pointers");
        - bugItem(4021, "[CTFE] AA rehash");
        - bugItem(4099, "Inconsistent behaviour of ++/-- when mixing opUnary and 'alias this'.");
        - bugItem(4444, "Cannot index built-in array with expression tuple");
        - bugItem(4460, "Regression(2.036) ICE(e2ir.c) when compiling foreach over associative array literal");
        - bugItem(4682, "[CTFE] Run-time Vs Compile-time of int.min % -1");
        - bugItem(4773, "Rebindable should be castable to bool");
        - bugItem(4837, "ICE(constfold.c) CTFE with >>>=");
        - bugItem(4984, "Recursive template constraint results in dmd running out of memory");
        - bugItem(5046, "Wrong type of implicit 'this' in struct/class templates");
        - bugItem(5081, "Pure functions as initializers for immutable structures");
        - bugItem(5188, "alias this and compare expression generates wrong code");
        - bugItem(5239, "optimizer misreports an used before set error");
        - bugItem(5373, "Regression (2.051) CTFE and std.string.replace() causes \"Bad binary function q{a == b}..\"");
        - bugItem(5440, "ICE(template.c): when struct AssociativeArray is missing from object.d");
        - bugItem(5585, "bad debug line number info for return statements with enumerator expressions");
        - bugItem(5745, "Missing error line number with lazy argument");
        - bugItem(5750, "Allow pure functions to have lazy arguments");
        - bugItem(5777, "Move semantics require full spec NRVO");
        - bugItem(5785, "Lexing or Parsing issue with UFCS");
        - bugItem(5790, "'Error: variable result used before set' when -release -inline -O");
        - bugItem(5799, "Address-of operator fails on nested conditional operator expression");
        - bugItem(5936, "Regression(2.050): Segfault when forward-referencing pure auto-return member function with parameter.");
        - bugItem(5953, "Too many trailing commas are accepted");
        - bugItem(6097, "SSSE3 not working with MMX instructions");
        - bugItem(6215, "LLVM-compiled DMD segfaults due to mem.c alignment issues");
        - bugItem(6220, "Regression(2.053) static foreach over a string[] no longer produces directly usable strings");
        - bugItem(6228, "Regression(2.053) ICE(e2ir.c) on {auto x = (*ptr) ^^ y} with const integer types");
        - bugItem(6230, "Member functions can no longer be weakly pure");
        - bugItem(6250, "[CTFE] Crash when swapping two pointers to arrays.");
        - bugItem(6265, "Pure-inference failed when calling other pure functions");
        - bugItem(6270, "XMMREGS not preserved on indirect function call");
        - bugItem(6276, "[CTFE] Strange behavior of using ~= operator twice");
        - bugItem(6280, "[CTFE] Cannot put 'in' expression of AA in an 'if' condition");
        - bugItem(6281, "[CTFE] A null pointer '!is null' returns 'true'.");
        - bugItem(6282, "[CTFE] ICE when dereferencing a pointer to reference type from 'in' of an AA");
        - bugItem(6283, "[CTFE][Regression 2.054] Failed to assign to AA using a constness-changed array as key");
        - bugItem(6284, "[Regression 2.054] 'pure' does not work with 'with' statement");
        - bugItem(6286, "Regression(2.054): Static arrays can not be assigned from const(T)[N] to T[N]");
        - bugItem(6293, "[Regression 2.054] The expression x.y makes the function impure when the 'x' part is not just a variable");
        - bugItem(6295, "[Regression 2.054] Segfault in checkPurity() of template value parameter");
        - bugItem(6306, "Regression(2.054): [CTFE] Strange behavior of indirect recursive call in CTFE");
        - bugItem(6308, "Destruction of temporaries on exception causes unhandled access violation");
        - bugItem(6316, "Regression(2.054): Class downcast is rejected in @safe code");
        - bugItem(6317, "ICE on struct literal of nested struct");
        - bugItem(6331, "[CTFE] Cannot evaluate SliceExp on if condition");
        - bugItem(6337, "[CTFE] ICE when touching member variable of struct during CTFE");
        - bugItem(6344, "[CTFE] Assertion Failure in interpret.c when create an empty slice from null pointer");
        - bugItem(6351, "Regression(2.054) Segfault: Vararg delegate as template param");
        - bugItem(6355, "Template constructor cannot initialize non-mutable field");
        - bugItem(6366, "alias this doesn't work with foreach range.front");
        - bugItem(6369, "alias this doesn't work with initializer");
        - bugItem(6374, "[CTFE] Cannot subscript using pointer to array");
        - bugItem(6375, "[CTFE] Segfault when using std.array.appender with an initial array");
        - bugItem(6386, "[CTFE] ICE on pointer casting");
        - bugItem(6389, "Segfault(dsymbol.c): deprecated @disable");
        - bugItem(6399, "[CTFE] struct member array.length -= x doesn't work, while array[0..$-x] works");
        - bugItem(6404, "Cannot check ref-ness of auto ref parameter in template constraint");
        - bugItem(6418, "[CTFE] Cannot call a struct member function with name 'length'.");
        - bugItem(6420, "[CTFE] ICE on dereference-assigning to a pointer casted from a literal");
        - bugItem(6429, "Nested function error in reduce");
        - bugItem(6433, "Meta-Bug AA type propagation");
        - bugItem(6434, "opDispatch must be considered before alias this.");
        - bugItem(6491, "Fully qualified values in default arguments of non-template functions are generated with an extra 'module' keyword");
        - bugItem(6499, "[GSoC] Destructor not called on object returned by method.");
        - bugItem(6505, "Wrong code for expression involving 8 floats, only with -O");
        - bugItem(6508, "alias this doesn't work with AssignExp rhs");
        - bugItem(6510, "[CTFE] \"internal error: illegal stack value\" when compiled with -inline");
        - bugItem(6511, "[CTFE] Array op gives wrong result");
        - bugItem(6512, "[CTFE] new T[][] doesn't work");
        - bugItem(6516, "Regression(2.055 beta) [CTFE] ICE(constfold.c) involving new dchar[]");
        - bugItem(6517, "[CTFE] ptr++ doesn't work but ++ptr does");
        - bugItem(6546, "alias this + IdentityExpression doesn't work");
        - bugItem(6556, "ICE for ImportStatement in DebugStatement");
        - bugItem(6558, "[CTFE] UTF-decoding foreach gives wrong index (1-indexed)");
        - bugItem(6561, "alias this + undefined symbol should cause error");
        - bugItem(6563, "wrong code when using at least 8 XMM regs");
        - bugItem(6577, "'Cannot initialize member' error line number");
        - bugItem(6601, "Regression(2.053): CTFE segfault taking address of function template");
        - bugItem(6602, "Invalid template instantiations leaked by is(typeof())/__traits(compiles, )/Type::trySemantic");
