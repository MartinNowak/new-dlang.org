extends base_changelog

append new_features
    ul
        li add -gs compiler switch
        - bugItem(3194, "invariant should be checked at the beginning and end of protected functions");
        - bugItem(5399, "Return the result of a nonvoid function in a void function");
        - bugItem(6752, "Add separate option to control stack frame generation");
        li
            - docLink("std.exception");
            | &mdash; enforce/enforceEx now can use in @safe pure function.
        li Added optional KeepTerminator param to std.string.splitLines.
        li Added std.string.outdent.
        li
            - docLink("std.utf");
            | &mdash; More @safe and pure.
        li
            - docLink("std.windows.registry");
            | &mdash; now use *W functions in order to deal properly
            | with Unicode.

append druntime_bugs_fixed
    ul
        - bugItem(5967, "Mangling of ArgClose for variadic function is swapped");
        - bugItem(6493, "Source code for the doc of core.time points to std.datetime.");
        - bugItem(6466, "core.demangle incorrect demangling of variables");

append library_bugs_fixed
    ul
        - bugItem(5522, "std.range.zip fails on arrays of Object.");
        - bugItem(6009, "std/container disabled on freebsd/64");
        - bugItem(6160, "std.conv.to: Ignore _ to match the rest of D");
        - bugItem(6181, "assert fails in datetime.d while runining Phobos unittest");
        - bugItem(6258, "std.conv.to!real(\"-\") fetches the front of an empty array.");
        - bugItem(6275, "Const values in tuples");
        - bugItem(6288, "std.conv.to removes const/immutable when converting a class");
        - bugItem(6609, "std.conv.parse!Integer should consider sign when radix == 10");
        - bugItem(6634, "std.path.globMatch throws wrong assertion");
        - bugItem(6640, "More formatting consistency between string and range of char");
        - bugItem(6761, "Strange behavior of RedBlackTree causing a dangling pointer");
        - bugItem(6819, "BigInt ^^ fails for some big numbers (powers)");

append dmd_bugs_fixed
    ul
        - bugItem(546, "Error message for accessing a deprecated variable is doubled");
        - bugItem(1339, "Invariant/const-ness is broken by built-in array properties sort and reverse");
        - bugItem(1891, "Array-concatenation of T* and T*[] produces corrupted result");
        - bugItem(1993, "Error calling vararg delegate with null");
        - bugItem(2315, "DMD Stack Overflow on unwanted ctfe recursion");
        - bugItem(2553, "Excess attribute propagation for interfaces");
        - bugItem(2361, "delete is allowed on invariant references.");
        - bugItem(2737, "Nonsensical Error Message on Unsafe .idup");
        - bugItem(2740, "Template Mixins do not work as advertised");
        - bugItem(2953, "tuple.length rejected as a tuple parameter in a static foreach");
        - bugItem(3069, "Array literals do not implicitly cast to void[]");
        - bugItem(3133, "Compiler does not check that static array casts are legal");
        - bugItem(3180, "Covariance of delegates/function pointers");
        - bugItem(3550, "array.dup violates const/invariant without a cast.");
        - bugItem(3659, "Too much exegesis on opEquals");
        - bugItem(3748, "inout does not work properly");
        - bugItem(4022, "[CTFE] AA get");
        - bugItem(4197, "ICE(glue.c): error in forward-referenced in/out contract");
        - bugItem(4206, "type accepted as enum initializer");
        - bugItem(4237, "Typedefs of the same name cause initializer conflict");
        - bugItem(4269, "Regression(2.031): invalid type accepted if evaluated while errors are gagged");
        - bugItem(4284, "empty string[] alias lacks .length in a template");
        - bugItem(5453, "ICE(statement.c): invalid switch statement forward referenced by CTFE");
        - bugItem(5696, "Templates typetuple iteration");
        - bugItem(5703, "std.intrinsic. and core.bitop.bsf, bsr and bswap should be CTFE-able");
        - bugItem(5886, "Template this parameter cannot be made implicit, when other parameters are explicitly given");
        - bugItem(5932, "Internal error: s2ir.c 339");
        - bugItem(6062, "segv in dmd/64 with assoc array literals");
        - bugItem(6073, "Cannot pass __traits(parent, ...) as a template parameter if it is a module");
        - bugItem(6084, "Impossible to instantiate local template with TypeTuple-foreach iterator variable.");
        - bugItem(6087, "typeof(this) doesn't work outside member function");
        - bugItem(6139, "Duplicate error message on compile-time out of bounds array index");
        - bugItem(6289, "Make slices of const/immutable arrays mutable (but keep the elements const/immutable)");
        - bugItem(6296, "ICE(glue.c): invalid template instantiated in is(typeof()).");
        - bugItem(6352, "Regression(2.054) Implicit pure/nothrow/@safe messes up delegate arrays");
        - bugItem(6360, "@property is doubled in di files when used with auto");
        - bugItem(6404, "Cannot check ref-ness of auto ref parameter in template constraint");
        - bugItem(6488, "DMD compiler bug");
        - bugItem(6518, "break inside a static foreach inside a switch");
        - bugItem(6529, "writeln(const array of enums) too");
        - bugItem(6584, "ICE on large version number/debug level");
        - bugItem(6596, "Error message with not extern(C) function");
        - bugItem(6599, "Segfault: invalid expression in initializer");
        - bugItem(6630, "Assigning null to class with nested alias this class is misinterpreted");
        - bugItem(6656, "static alias this broken in 2.055");
        - bugItem(6661, "Templates instantiated only through is(typeof()) shouldn't cause errors");
        - bugItem(6665, "Regression(2.055) ICE(cg87.c): static double inside closure");
        - bugItem(6672, "[CTFE] ICE on compile time std.algorithm.sort");
        - bugItem(6674, "Regression(2.055) mixin and __traits(allMembers) generates incorrect result");
        - bugItem(6675, "Regression(2.054) ICE(glue.c) template parameter deduction with errors gagged");
        - bugItem(6682, "Template function that has lazy parameter is not inferred as pure");
        - bugItem(6690, "Using lazy parameter should be inferred as @safe");
        - bugItem(6691, "static constructor inside template cannot initialize immutable template members");
        - bugItem(6693, "[CTFE] Cannot set value to nested AA");
        - bugItem(6695, "typeof(this) does not take into account const/immutable attributes inside member functions");
        - bugItem(6698, "Regression(2.053): segfault with naked asm in inner function");
        - bugItem(6700, "Regression(2.053) using $ inside a slice of a tuple");
        - bugItem(6719, "\"Error: out of memory\" in parsing");
        - bugItem(6721, "[CTFE] Cannot get pointer to start of char[]");
        - bugItem(6727, "[CTFE] ICE(interpret.c): assignment from string literal.dup.ptr");
        - bugItem(6733, "Regression(2.054) ICE(cod2.c) pure nothrow func with side-effect parameters");
        - bugItem(6739, "[CTFE] Cannot set a value to an outer AA of a nested AA");
        - bugItem(6746, "static this() inside struct skipped upon static method call");
        - bugItem(6749, "[CTFE] problem with array of structs");
        - bugItem(6751, "[CTFE] ref argument of AA doesn't work");
        - bugItem(6753, "Regression(2.055beta) \"Reinterpret\" cast of array to a tail const one doesn't work inside @trusted");
        - bugItem(6759, "missing initialization in foreach with alias this");
        - bugItem(6765, "[CTFE]: AA.length doesn't compile when AA is null");
        - bugItem(6769, "[CTFE] AA.keys doesn't compile when -inline is used");
        - bugItem(6770, "inout is allowed on fields");
        - bugItem(6773, "inout variable should not be modifiable");
        - bugItem(6775, "[CTFE] foreach over an AA fails to compile");
        - bugItem(6782, "inout-correct range is not iterable using foreach with type deduction inside non-inout function");
        - bugItem(6813, "Yet another \"cannot get frame pointer\" error");
        - bugItem(6822, "New ubuntu linking rules prevent dmd from linking programs on Ubuntu 11.10");
        - bugItem(6825, "Regression(2.055+): Address of templated method incorrectly taken");
