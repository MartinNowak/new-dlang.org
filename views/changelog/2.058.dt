extends base_changelog

append new_features
    ul
        li Add new => lambda syntax.
        li Allow 1.userproperty syntax. NOTE: 1.f is no longer a float literal, add a 0.
        li Convert to -shared dmd switch instead of -dylib
        li Better use of XMM registers in OS X 32 bit target.
        li Add inline assembler support for AVX instructions (64 bit targets only).
        li Use of base class protection is now deprecated.
        li Added traits isVirtualMethod and getVirtualMethods.
        li Struct/class invariants are now implicitly const.
        li
            | Major overhaul of std.regex module's implementation.
            | Breaking change in std.regex.replace with delegate,
            | use Captures!string instead of RegexMatch!string as delegate
            | parameter.
        li
            | As typedef has been deprecated, overloads of std.conv.to which
            | use typedef have now been deprecated.
        li
            | std.array.insert has been deprecated. Please use
            | std.array.insertInPlace instead.
        li
            | The overload of std.array.replace which replaces in place has
            | been deprecated. Please use std.array.replaceInPlace instead.
        li
            | The toISOExtendedString and fromISOExtendedString functions on
            | SysTime, Date, TimeOfDay, and DateTime in std.datetime have been
            | deprecated. Please use toISOExtString and fromISOExtString
            | instead.
        li
            | std.file.getTimesPosix has been deprecated. Please use
            | std.file.getTimes instead.
        li
            | The overloads for isDir, isFile, and isSymlink in std.file
            | which take a uint have been deprecated. Please use attrIsDir,
            | attrIsFile, and attrIsSymlink instead.

append druntime_bugs_fixed

append library_bugs_fixed
    ul
        - bugItem(4295, "IID_IUnknown symbol undefined in phobos.lib");
        - bugItem(7241, "std.format can't read into array of dchar");

append dmd_bugs_fixed
    ul
        - bugItem(516, "Mutually calling constructors allowed");
        - bugItem(620, "Can't use property syntax with a template function");
        - bugItem(664, "is(func T == function) ignores variadic arguments");
        - bugItem(678, "Compiler accepts, for a function T[] t(), t().ptr but not t.ptr");
        - bugItem(796, "Asserting a null object reference throws AssertError Failure internal\\invariant.d(14) or Access Violation");
        - bugItem(949, "Wrong spec/compiler behaviour for Strings, Integers and Floats");
        - bugItem(955, "Passing arguments into functions - in, out, inout, const, and contracts");
        - bugItem(1313, "out/body disables escape analysis");
        - bugItem(1521, "Ambiguous documentation");
        - bugItem(1563, "dynamic cast is not always performed");
        - bugItem(1570, "Wrong return for address operator");
        - bugItem(1918, "__traits(getVirtualFunctions) returns final functions");
        - bugItem(1920, "Class documentation incomplete");
        - bugItem(1943, "Templates can't take function pointer parameters");
        - bugItem(2106, "export class doesn't affect, what is exported");
        - bugItem(2351, "enum with no members allowed");
        - bugItem(2382, "spec is not clear on what is allowed as global/static initializers");
        - bugItem(2387, "Static array terminology");
        - bugItem(2411, "Reference Tuple Foreach");
        - bugItem(2417, "[module] protected base member is not available via base handle in a derived class if it is defined in a separate module");
        - bugItem(2442, "opApply does not allow inferring parameter types when overloaded on const");
        - bugItem(2443, "opApply should allow delegates that are not ref if it makes no sense");
        - bugItem(2483, "DMD allows assignment to a scope variable");
        - bugItem(2494, "describe explicit casting of arrays");
        - bugItem(2495, "const syntax for member functions needs better description");
        - bugItem(2497, "delete and null relationship needs more details");
        - bugItem(2524, "final override inconsistent when implementing interfaces");
        - bugItem(2639, "Hex and octal string values not completely specified");
        - bugItem(2819, "array.sort segfaults if array length >=0x8F_FFFF");
        - bugItem(2894, "abstract classes sometimes allow non-abstract bodyless functions");
        - bugItem(2997, "allMembers does not return interface members");
        - bugItem(3084, "Formatting of lazy in parameters section");
        - bugItem(3092, "Indexing a tuple produces a tuple containing the indexed element");
        - bugItem(3111, "'mangleof' can't be member of a struct not documented");
        - bugItem(3187, "Nested foreach over opApply doesn't work");
        - bugItem(3204, "Document global properties");
        - bugItem(3235, "[tdpl] Function literals must be deduced as \"function\" or \"delegate\"");
        - bugItem(3265, ".classinfo for Interface-typed reference does not return instance's ClassInfo");
        - bugItem(3492, "Can't overload nested functions");
        - bugItem(3578, "Impossible to run a struct invariant using assert(s)");
        - bugItem(3735, "op=");
        - bugItem(3757, "Overloading const function with overridden non-const function results in seg fault.");
        - bugItem(3777, "size_t is undefined");
        - bugItem(3783, "Text inconsistent with EscapeSequence rules");
        - bugItem(3787, "clarification: assigment to 'this'");
        - bugItem(3791, "Reference anonymous nested classes when describing new expressions");
        - bugItem(3800, "\"Foreach over Structs and Classes with Ranges\" and \"Invariant Struct\" in D2 Spec");
        - bugItem(3838, "PrimaryExpression rule doesn't permit module scope template instances");
        - bugItem(3886, "Bad example of definition file for DLLs");
        - bugItem(3906, "Undefined struct and union declarations are not documented");
        - bugItem(3908, "@ attributes not part of function grammar");
        - bugItem(3954, "DeclDef rule is missing TemplateMixinDeclaration");
        - bugItem(3988, "Provide canonical example for operator overloading");
        - bugItem(4088, "opEquals not called on interfaces");
        - bugItem(4180, "D DWARF extensions conflict with DWARF-4");
        - bugItem(4251, "Hole in the const system: immutable(T)[] implicitly casts to ref const(T)[]");
        - bugItem(4371, "segfault(template.c) template tuple in is() expression");
        - bugItem(4413, "typeof(this) doesn't work in method template signature");
        - bugItem(4421, "Union propagates copy constructors and destructors over all members");
        - bugItem(4523, "[tdpl] .remove method for Associative Arrays returns void in all cases");
        - bugItem(4539, "Refuse assignment to string literal");
        - bugItem(4545, "Alias to members possible without \"this\" instance");
        - bugItem(4550, "D2 Language Docs: http://www.digitalmars.com/d/2.0/statement.html");
        - bugItem(4553, "D2 Language Docs: http://www.digitalmars.com/d/2.0/struct.html");
        - bugItem(4647, "[tdpl] Cannot explicitly call final interface method, ambiguous calls allowed");
        - bugItem(4651, "Docs: Returned classes that have access to stack variables of its enclosing function");
        - bugItem(4675, "[tdpl] Eponymous Template should hide internal names");
        - bugItem(4711, "Incorrect handling of && operator with void operand");
        - bugItem(4841, "-inline wrecks nested struct with alias template parameter (An array()/map inlining problem)");
        - bugItem(4887, "Right-shifting by 32 is allowed and broken");
        - bugItem(4940, "ICE(symbol.c): Accessing tuple-typed field of struct literal with user-defined constructor");
        - bugItem(4956, "remove direct references to gcc from linux.mak");
        - bugItem(5023, "Docs about order of execution of invariant and pre/post conditions");
        - bugItem(5111, "Static function-level variables are not in the language spec.");
        - bugItem(5114, "Too many error messages");
        - bugItem(5132, "~ unary operator silently different from C");
        - bugItem(5138, "Special token sequence");
        - bugItem(5261, "Uncompilable example for Windows");
        - bugItem(5299, "Protected inheritance is semantically undefined.");
        - bugItem(5337, "Documentation regarding interfacing with C does not account for TLS differences");
        - bugItem(5476, "spec: attributes have an optional else clause");
        - bugItem(5493, "Able to overwrite immutable data by passing through ref function parameter");
        - bugItem(5527, "Bug in http://www.digitalmars.com/d/2.0/ctod.html#closures");
        - bugItem(5605, "[tdpl] foreach with ranges doesn't support opSlice()");
        - bugItem(5648, "dmd command line option list inconsistencies");
        - bugItem(5713, "Broken final switch on ints");
        - bugItem(5715, "Contradiction in spec: meaning of variable.init");
        - bugItem(5718, "Can't demangle symbol defined inside unittest block");
        - bugItem(5796, "ICE with pragma(msg, ...) after missing ';' in a template");
        - bugItem(5820, "Documentation states string literals can implicitly convert to char*");
        - bugItem(5841, "alias grammar is incorrect");
        - bugItem(6013, "private ignored for aliases");
        - bugItem(6037, "[CTFE] recursive ref parameters evaluated incorrectly");
        - bugItem(6091, "[d-p-l.org] Description for \"Modifier casting\" is misleading");
        - bugItem(6165, "Anonymous enums specification");
        - bugItem(6177, "Regression(2.053): ICE backend/cgcs.c: struct with destructor in assoc. array or typesafe variadic functions");
        - bugItem(6205, "Strongly-pure nothrow functions with ignored return value are entirely stripped even if it contains a failing 'assert'.");
        - bugItem(6208, "Parameter storage classes are ignored in template function deducing.");
        - bugItem(6364, "Static struct's destructor called on exit of function");
        - bugItem(6402, "Note on @property in spec needs updating");
        - bugItem(6451, "[64bit] ICE(expression.c:4434): SymbolExp::SymbolExp(Loc, TOK, int, Declaration*, int): Assertion 'var' failed");
        - bugItem(6473, "Stack overflow with struct destructor as default parameter");
        - bugItem(6504, "Regression(2.041): \"str\" ~ [arr] allows string literal to be modified");
        - bugItem(6701, "template specialization resolution failure");
        - bugItem(6704, "CommaExpression as an IfCondition");
        - bugItem(6714, "[tdpl] Type inference for parameters of function and delegate literals");
        - bugItem(6780, "Templated global property functions do not work");
        - bugItem(6839, "documentation for opAssign incorrect");
        - bugItem(6933, "Segfault(declaration.c) using struct with destructor in CTFE");
        - bugItem(6934, "[CTFE] can't use $ in a slice of an array passed by ref");
        - bugItem(6939, "wrong type qualifier combination");
        - bugItem(6940, "immutable(int*)*/immutable(int)** and int** do not combine");
        - bugItem(6948, "Possible bug in compiler or documentation regarding signature of opCmp()");
        - bugItem(6964, "Error message with __error: static assert(undefined+1)");
        - bugItem(6968, "Segmantation fault, if exclamation mark absent");
        - bugItem(6971, "[lex.dd] Type of string literals are outdated");
        - bugItem(6984, "CTFE generates a torrent of spurious errors, if there was a previous error");
        - bugItem(6985, "[CTFE] Non-constant case expressions can't be interpreted");
        - bugItem(6987, "The \"Memory Management\" documentation incorrectly claims arrays are passed by reference");
        - bugItem(6995, "[CTFE] can't interpret static template method");
        - bugItem(7011, "No line number error for vector power");
        - bugItem(7037, "TemplateTypeParameterSpecialization works differently from IsExpression regarding alias this");
        - bugItem(7043, "CTFE: ICE illegal reference value 0LU, only with -inline");
        - bugItem(7073, "Parsing of class-returning varargs function inside module ctor fails");
        - bugItem(7108, "ICE: TraitsExp::semantic(Scope*) 2.056 -> 2.057 regression - segfault");
        - bugItem(7120, "Scope Delegates + Delegate Literals");
        - bugItem(7123, "static assert(is(typeof(toDelegate(&main)))) is false");
        - bugItem(7124, "Alias this type is not considered in template type deduction");
        - bugItem(7127, "Const-related infinite recursion in DWARF generation");
        - bugItem(7133, "[tdpl] There should be no empty statement");
        - bugItem(7136, "alias this lookup should run before merging modifiers of both sides.");
        - bugItem(7143, "[CTFE] cannot compare class references with \"is\"");
        - bugItem(7144, "[CTFE] base class does not call overridden members");
        - bugItem(7154, "[CTFE] failing downcast causes error");
        - bugItem(7158, "[CTFE] ICE(interpret.c) calling a class member using a dotvar expression");
        - bugItem(7160, "Regression(2.057): ICE(dsymbol.c:1052) ICE using __traits(derivedMembers)");
        - bugItem(7162, "[CTFE] \"bool || void\" expression crashes dmd");
        - bugItem(7165, "[CTFE] ice converting null pointer to bool with constant member function");
        - bugItem(7166, "Internal error: ../ztc/cgxmm.c 60");
        - bugItem(7168, "Regression(2.057) __traits(allMembers) returns wrong tuple");
        - bugItem(7170, "[UFCS] array + specialized template member syntax causes ICE");
        - bugItem(7173, "dmd: glue.c:1065: virtual unsigned int Type::totym(): Assertion `0' failed.");
        - bugItem(7178, "Segfault with import of invalid template");
        - bugItem(7185, "[CTFE] ICE on changing char array length");
        - bugItem(7187, "Regression(head 12d62ca5): [CTFE] ICE on slicing");
        - bugItem(7188, "\"import phobos;\" crashes DMD");
        - bugItem(7189, "inline failed");
        - bugItem(7190, "Tuple length incorrect");
        - bugItem(7193, "Regression(2.058head): ICE: delete lambda expression crashes dmd");
        - bugItem(7194, "[CTFE] Incorrect behaviour with pointers as local struct variable");
        - bugItem(7196, "Unfair function address overload resolution");
        - bugItem(7197, "enum string doesn't work with CTFE");
        - bugItem(7199, "std.string.indexof cannot be compiled with -inline");
        - bugItem(7201, "Lambda template assignment to variable");
        - bugItem(7207, "Explicit cast should resolve lambda type");
        - bugItem(7212, "Regression(Head): ICE with overload resolution and delegate/function inference");
        - bugItem(7216, "[CTFE] Can't call struct member function using pointer field");
        - bugItem(7217, "[CTFE] ICE on accessing struct array field");
        - bugItem(7218, "Nested function with contract is rejected");
        - bugItem(7228, "MOVDQ2Q instruction is emitted with swapped register indices");
        - bugItem(7231, "Segfault using opDispatch with property notation");
        - bugItem(7232, "Warning: statement is not reachable has no line number");
        - bugItem(7234, "Segmentation fault when using stdio");
        - bugItem(7239, "C style struct initialization doesn't work with aliases");
        - bugItem(7245, "[CTFE] Address of ref foreach parameter changes to point after array");
        - bugItem(7248, "[CTFE] Stack overflow on using struct filed pointer with address of array element");
        - bugItem(7261, "ICE(glue.c): With taskPool.reduce");
        - bugItem(7266, "[CTFE] Assign to ref param (that's taken from struct member) is noop");
        - bugItem(7277, "[CTFE ICE] Assertion failure: 'thisval' on line 1690 in file 'interpret.c'");
        - bugItem(7278, "Templated struct (instantiated with null) can't access its own members");
        - bugItem(7285, "Implicit fixed-size array cast");
        - bugItem(7290, "Heap allocation with scoped delegate literal");
        - bugItem(7294, "[Regression] No warning when escaping local reference type variables");
        - bugItem(7295, "Alias This + Pure + pointsTo = rejects-valid");
        - bugItem(7296, "[2.058] Regression: Cannot swap RefCounted");
        - bugItem(7309, "[2.058] Regression caused by new inlining code");
        - bugItem(7321, "returning void considered unsafe by safety inference");
        - bugItem(7335, "sometimes the OUT - block have undefined class members-acces");
        - bugItem(7351, "Possible asm bug: bad type/size of operands 'xadd'");
        - bugItem(7359, "Template function with typesafe variadic rejects more than one string arguments");
        - bugItem(7363, "Eponymous Template doesn't hide internal names in some cases with `static if`");
        - bugItem(7365, "[Regression after 2.057] AAs broken for Object keys and values with opEquals");
        - bugItem(7367, "wrong char comparison result");
        - bugItem(7369, "Inout constructor causes compiler to reject invariant");
        - bugItem(7373, "(Regression git) Renamed imports conflict with other implicitly imported symbols");
        - bugItem(7375, "Regression(2.057): Invalid downcast permitted with derived/aliased template classes");
        - bugItem(7377, "Compiler segfault in: TemplateMixin::hasPointers()");
        - bugItem(7379, "DMD segfaults on semantic3 phase when alias enum this");
        - bugItem(7383, "Blank lines in code sections cause premature section termination");
        - bugItem(7384, "Typo in volatile deprecation message");
        - bugItem(7394, "ddmangle tool needs rebuilding");
        - bugItem(7416, "2.058 regression: fails to instantiate a constrained function template with a nested function");
        - bugItem(7419, "[2.058/CTFE] Constructor of struct is overwritten inside a unittest with -inline");
        - bugItem(7422, "Regression(master): ICE with template function and if statement");
        - bugItem(7424, "Segfault when trying to call a templated property with different const-ancy.");
        - bugItem(7425, "IFTI does not work with inout methods");
        - bugItem(7428, "regression (DMD 2.058head) ICE on slightly convoluted setup including closures");
        - bugItem(7435, "Regression(master):dmd crashes when 'scope(failure) debug ...' without -debug option.");
        - bugItem(7475, "Regression(2.058 beta): Template member erroneously inaccessible");
        - bugItem(7498, "function expected before (), not function");
