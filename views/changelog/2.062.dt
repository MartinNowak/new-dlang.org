extends base

append head
    title D Programming Language Version #{thisVersion} Change Log

append content
    header
        h1 Change Log &ndash; v#{thisVersion}

    |!= h2(toc, "language-changes", "Language Changes")

    |!= h3(toc, "typeof-change", "typeof() change")

    p
        | As a result of fixing
        - bugLink(6408);
        | the usage of <code>typeof()</code> and indexing may
        | require changes to user code:
    code
        pre
            | template ElementTypeOf(T)
            | {
            |     alias typeof(T[0]) ElementTypeOf;
            | }
            |
            | void main()
            | {
            |     // worked in 2.061 due to a bug
            |     static assert(is(ElementTypeOf!(int[]) == int));
            | }

    |!= h3(toc, "alias-syntax-change", "alias syntax change")

    p
        | The expression in <code>typeof(T[0])</code> used to be wrongly
        | interpreted as the element type of <code>T</code>, however in
        | v2.062 it is interpreted as a static array of element <code>T</code>
        | with length 0. To work around this the user can either use a
        | trait from the standard library, or use the <code>.init</code>
        | property of a type for arbitrary expressions:
    code
        pre
            | import std.range;
            |
            | template ElementTypeOf(T)
            | {
            |     // use T.init
            |     alias typeof(T.init[0]) ElementTypeOf;
            | }
            |
            | void main()
            | {
            |     // use std.range.ElementType
            |     static assert(is(ElementType!(int[]) == int));
            |
            |     // use custom template after fixing its code
            |     static assert(is(ElementTypeOf!(int[]) == int));
            | }

    |!= h2(toc, "dmd-compiler-regressions-fixed", "DMD Compiler Regressions Fixed")

    ul
        - bugItem(9174, "regression(2.057) ice(cast.c) with ternary operator and alias this");
        - bugItem(9244, "union containing pointers not allowed");
        - bugItem(9258, "opAssign with base class triggers \"identity assignment operator overload\" error");
        - bugItem(9259, "Passing an array of pointers to a typesafe vararg is broken");
        - bugItem(9263, "statement is not reachable when statement is reachable");
        - bugItem(9266, "Cannot define two Tuple objects.");
        - bugItem(9268, "[ice-on-invalid] void assignment in fail44.d no longer caught in frontend");
        - bugItem(9273, "DMD segfaults with templated ctors in implicit super call");
        - bugItem(9276, "regression(2.061): Forward reference error");
        - bugItem(9278, "ICE todt.c:692 when float containing struct is defined after use");
        - bugItem(9309, "Regression (2.061): -O -release generates wrong code");
        - bugItem(9332, "[REG][2.060 -> 02.061] struct constructor taking itself creates 'Warning: statement is not reachable'");
        - bugItem(9377, "Link-failure regression cause by fixing issue 8504");
        - bugItem(9385, "[Regression 2.057] null literal should be implicitly convertible to bool");
        - bugItem(9387, "Compiler switch -O changes behavior of correct code");
        - bugItem(9399, "ICE with nested function, template alias parameter, -inline, depending on order of source files");
        - bugItem(9404, "Nullable is unusable with 2.061");
        - bugItem(9406, "(Regression: 2.061) Stack overflow from a forward reference error");
        - bugItem(9409, "[2.062-alpha] Regression with $ inside of expression tuples");
        - bugItem(9410, "[Regression 2.061] Wrong selection for function overload");
        - bugItem(9416, "[REG][2.060 -> 02.061] DMD eagerly instantiates template parameter-less opAssign");
        - bugItem(9420, "[2.062alpha] Weird \"(null)\" output in error message");
        - bugItem(9435, "regression(head): forward reference error");
        - bugItem(9436, "enum cannot be forward referenced with cyclic imports and mixin");
        - bugItem(9496, "[REG 2.061 -> 2.062 alpha] \"this[1 .. $]\" passes wrong \"this\" to \"opDollar\"");
        - bugItem(9514, "\"template instance â€¦ is not an alias\"");
        - bugItem(9525, "[CTFE] Cannot convert &S to const(S*) at compile time");

    |!= h2(toc, "dmd-compiler-bugs-fixed", "DMD Compiler Bugs Fixed")

    ul
        - bugItem(1369, "Unable to find 'this' in __traits(getMember)");
        - bugItem(1730, "Bogus error message calling a non-const struct method on a const struct reference");
        - bugItem(1841, "Closure detection doesn't work when variable is used in a nested function");
        - bugItem(2452, "Unimplemented method errors should show function overload");
        - bugItem(3321, "debug flags");
        - bugItem(3466, "Wrong JSON output for templated classes, structs, and interfaces");
        - bugItem(4178, "destructor missing in JSON output");
        - bugItem(4269, "Regression(2.031): invalid type accepted if evaluated while errors are gagged");
        - bugItem(4477, "JSON output for function definitions includes insufficient type information");
        - bugItem(4478, "JSON output omits import statements");
        - bugItem(4540, "Better error message for wrong switch type");
        - bugItem(5168, "String enums don't work with -g compiler switch");
        - bugItem(5461, "Invalid declaration for auto functions in .di files generated by DMD -H");
        - bugItem(5933, "Cannot retrieve the return type of an auto-return member function");
        - bugItem(5978, "ICE(mtype.c) when calling __traits(parent) on the child of an anonymous function.");
        - bugItem(6057, "Problem with defining enum in function");
        - bugItem(6319, "debug's relaxed purity does not apply to nested scopes");
        - bugItem(6332, "Auto-return function cannot be inferred as @safe");
        - bugItem(6408, "string[].init gives a wrong type");
        - bugItem(6538, "ICE(mangle.c) Invalid template constraints");
        - bugItem(6552, "Wrong fallthrough warning for CaseRange");
        - bugItem(6652, "foreach parameter with number range is always ref");
        - bugItem(6708, "immutable ref implicit cast to const ref");
        - bugItem(6743, "ICE(mars.c) attempting to compile an exe file");
        - bugItem(6833, "Floating point literals lose fractional part in headers");
        - bugItem(6873, "Multiple storage class is not allowed on template argument");
        - bugItem(6902, "Different \"pure nothrow int()\" types");
        - bugItem(6905, "ref acts as auto ref when return type is missing");
        - bugItem(6962, "Wrong Code With Scope Exit and Array Parameter, only with -O");
        - bugItem(6963, "pure/nothrow inference doesn't work for function pointers");
        - bugItem(7152, "Can't assign null to default argument");
        - bugItem(7159, "Forward reference when casting auto return method");
        - bugItem(7252, "ICE(template.c): 'global.errors' on line 4893 in file 'template.c'");
        - bugItem(7408, "traits compiles fails for built-in properties of template instances");
        - bugItem(7420, "Duplicate \"cannot be read at compile time\" error messages");
        - bugItem(7585, "functions in templates inferred as delegate");
        - bugItem(7740, "unicodeProperties cannot be read at compile time for ctRegex");
        - bugItem(7950, "Type tuples are incorrectly flattened in base type list of interface");
        - bugItem(8053, "Recursive alias this causes infinite loop");
        - bugItem(8152, "Linking C library causes Seg-fault");
        - bugItem(8153, "Warning about toHash signature is incorrect on x86_64");
        - bugItem(8504, "Template attribute inferrence doesn't work");
        - bugItem(8583, "[64 bit] AA ushort[dchar] byValue range is corrupted on x86_64");
        - bugItem(8631, "illegal overrides accepted");
        - bugItem(8717, "`private` and `protected` restrict member usage in same module");
        - bugItem(8741, "wrong code for struct member initialized using struct constructor");
        - bugItem(8742, "Anonymous nested class derived from another nested class makes DMD crash");
        - bugItem(8763, "struct initialization with empty variadic arguments tries to call constructor");
        - bugItem(8783, "ref foreach update of const fixed size arrays in constructor");
        - bugItem(8787, "Virtual not abstract methods in interfaces error message");
        - bugItem(8832, "Segfault when accessing range returned by function that has delegate referencing local variables");
        - bugItem(8847, "voldemort + inout confuses \"is\"");
        - bugItem(8892, "Wrong diagnostic for static array assignment");
        - bugItem(8898, "false positive dangling else warning");
        - bugItem(8913, "Wrong code in IfStatement condition Expression");
        - bugItem(8922, "__traits(parent, ) shows current module as a parent");
        - bugItem(8969, "is(T == __parameters) is undocumented");
        - bugItem(8982, "ICE(ctfeexpr.c) __parameters of an erroneous default parameter");
        - bugItem(9018, "__traits(compiles, ...) is true on second check for same incompilable code");
        - bugItem(9083, "mixin expression on template argument doesn't work");
        - bugItem(9113, "ICE(interpret.c): CTFE assignment to member of struct in union");
        - bugItem(9178, "UDA: getAttributes does not play well with tupleof");
        - bugItem(9191, "Unhelpful error message on failing override");
        - bugItem(9195, "Should not be able to index a pointer in safed");
        - bugItem(9198, "Vararg functions don't respect IFTI rules");
        - bugItem(9200, "Wrong SIMD code generated");
        - bugItem(9208, "[ICE](func.c line 1205) with auto return in recursive function");
        - bugItem(9236, "CTFE ice on switch + with(EnumType)");
        - bugItem(9250, "Wrong line number for error involving length of a static array");
        - bugItem(9254, "ICE on invalid foreach aggregate");
        - bugItem(9264, "[64bit] Wrong code with conversion from int parameter to float");
        - bugItem(9284, "DMD segfaults with templated ctors in constructor delegation");
        - bugItem(9291, "[ICE][REG] throwing undefined identifier with nothrow crashes dmd");
        - bugItem(9293, "enum struct with StructInitializer reports weird error");
        - bugItem(9304, "Unary minus operator doesn't work correctly with SIMD types.");
        - bugItem(9305, "Ugly Ddoc for default template lambda expressions");
        - bugItem(9312, "with statement error message is wrong");
        - bugItem(9315, "ICE (expression.c:4249, StructLiteralExp::getField) Tupleof of nested struct literal");
        - bugItem(9320, "optimizer should do copy propagation on structs, too");
        - bugItem(9322, "Internal error: ../ztc/cod1.c 3510 with SIMD on OSX 32");
        - bugItem(9330, "Cannot run dmd test suite with MSYS");
        - bugItem(9338, "Compiler segfaults if try to CTFE member function without valid 'this'");
        - bugItem(9348, "\"tmpl!arg\" syntax followed by \"!is\" or \"!in\"");
        - bugItem(9350, "std.algorithm.findAdjacent unreachable code warning with infinite ranges");
        - bugItem(9357, "Floating-point literal should always be printed with a period in diagnostic errors");
        - bugItem(9358, "Compiler creates duplicate switch cases after an error");
        - bugItem(9368, "Final switch on typedef'ed enum is not properly checked");
        - bugItem(9369, "DDoc hardcodes '&' -> '&' in code");
        - bugItem(9374, "'super' should be accessible inside template constraint");
        - bugItem(9398, "Wrong diagnostic for ternary operator type mismatch");
        - bugItem(9418, "Segmentation fault using only datetime and stdio.");
        - bugItem(9438, "Strange RefCounted stack overflow");
        - bugItem(9442, "typeid() doesn't work without `this.` for class fields");
        - bugItem(9453, "ice(symbol.c) with slice on temporary");
        - bugItem(9458, "ModExp generates invalid code against array operands");
        - bugItem(9461, "Ability to break typesystem with `inout`");
        - bugItem(9479, "_error_ in error message of type inference of a delegate literal");
        - bugItem(9484, "Syntax error in JSON output");
        - bugItem(9510, "core.bitop.bsr undefined");

    |!= h2(toc, "dmd-compiler-ehancements", "DMD Compiler Enhancements")

    ul
        - bugItem(2630, "ddoc should be able to document unittests");
        - bugItem(3404, "JSON output should retain original alias names");
        - bugItem(4194, "Attributes included in JSON output");
        - bugItem(5529, "std.system.endian for pure functions?");
        - bugItem(5893, "Allow simple aliases for operator overloading");
        - bugItem(6171, "rdmd: cache dependency file to improve startup time [patch]");
        - bugItem(8105, "Implement \"in ref\"");
        - bugItem(8128, "unittest blocks should be allowed in interfaces");
        - bugItem(9389, "ignore -Hd if -Hf is present");
        - bugItem(9463, "make @safe \"non-escapable\"");

    |!= h2(toc, "phobos-regressions", "Phobos Regressions")

    ul
        - bugItem(9355, "[security] SSL certificate signature verification disabled in std.net.curl");
        - bugItem(9444, "Regression (2.059): shell doesn't throw on error.");
        - bugItem(9457, "isSorted(string) doesn't work");
        - bugItem(9523, "std.conv.to will no longer convert enums to themselves ");

    |!= h2(toc, "phobos-bugs-fixed", "Phobos Bugs Fixed")

    ul
        - bugItem(5065, "writefln(\"%f\" of a Tuple prints a result");
        - bugItem(5265, "std.array.back does not work correctly for wchar-based arrays");
        - bugItem(5726, "boyerMooreFinder hangs when finding");
        - bugItem(5763, "traits.d BaseClassesTuple function incorrectly handles Object class argument");
        - bugItem(5773, "sort() and topN() fail on sliced/resized array of tuples");
        - bugItem(6066, "std.container: BinaryHeap interface is broken.");
        - bugItem(6436, "Refcounted initialization bug");
        - bugItem(6635, "std.conv.emplace: enforcement is too weak");
        - bugItem(6668, "Wrong \"to\" conversion stack trace");
        - bugItem(7142, "Wrong formatted write of boolean values");
        - bugItem(7659, "std.stdio.File.close() erases file.name");
        - bugItem(7819, "std.file.setTimes throws error on folders");
        - bugItem(8078, "receiveOnly should tell which type it expected and got on mismatch");
        - bugItem(8314, "randomSample primes with constant");
        - bugItem(8326, "std.string.format results in run-time exception");
        - bugItem(8367, "std.range.chain's template constraint is inadequate");
        - bugItem(8368, "std.algorithm.sort's template constraint is inadequate");
        - bugItem(8567, "isDynamicArrray!S == true for S with alias this to array");
        - bugItem(8689, "Variant opArithmetic does not attempt float conversion");
        - bugItem(8694, "std.zlib.(Un)Compress can cause an _onInvalidMemoryOperationError");
        - bugItem(8837, "BigInt needs better operator template constraints");
        - bugItem(8890, "std.algorithm.commonPrefix does not handle unicode correctly");
        - bugItem(8920, "iota should work with all integral types");
        - bugItem(9005, "std.concurrency.spawn should allow `void delegate(Args) shared` for new Tid");
        - bugItem(9163, "std.parallelism broken with extensive optimizations (gdc)");
        - bugItem(9211, "regex lookahead, (?=(\\d\\d\\d)+\\b) failed");
        - bugItem(9288, "Parameter(Identifier|DefaultValue)Tuple report pointless errors");
        - bugItem(9299, "std.algorithm.minPos of const(int)[]");
        - bugItem(9317, "ParameterStorageClassTuple reports errors for inout function");
        - bugItem(9336, "Writeln is unable to print address of shared variable");

    |!= h2(toc, "phobos-enhancements", "Phobos Enchancements")

    ul
        - bugItem(4287, "opOpAssign!(\"~=\") for std.array.Appender");
        - bugItem(4813, "trait for getting at access modifiers");
        - bugItem(5666, "std.array.replace compile error (string and immutable string)");
        - bugItem(6614, "std.traits should have an isFinal template");
        - bugItem(7896, "Sequence slicing");
        - bugItem(8143, "Safe std.conv.to enum conversion");
        - bugItem(9337, "There's no Duration.max");
        - bugItem(9339, "std.random.uniform!Enum should return random enum member");

    |!= h2(toc, "druntime-bugs-fixed", "Druntime Bugs Fixed")

    ul
        - bugItem(4793, "Runtime.loadLibrary cannot load dll using MBS paths.");
        - bugItem(5375, "Detection of cyclic module imports provides error findings on console, instead of exception msg");
        - bugItem(8132, "LPTSTR always aliases to LPSTR");
        - bugItem(9373, "Add deprecation message to all empty deprecation statements");

    |!= h2(toc, "website-regression", "Website Regressions")

    ul
        - bugItem(9467, "Operator Overloading anchors are broken");
        - bugItem(9492, "[2.052 beta] Stylesheet not found for off-line HTML docs");

    |!= h2(toc, "website-bugs", "Website Bugs Fixed")

    ul
        - bugItem(5513, "Erroneous example in std.algorithm");
        - bugItem(7304, "Online docs incorrect with regards to covariant arrays");
        - bugItem(7345, "interfaceToC.html missing on left-hand side");
        - bugItem(8302, "Documentation of dirEntries in std.file is incomplete");
        - bugItem(8574, "[std.format] The flag ' ' works for floating numbers, not only for integers");
        - bugItem(8619, "Tuples article uses writefln instead of writeln");
        - bugItem(9321, "Dead link to HTML5 standard in language specification");
        - bugItem(9394, "ABI for static arrays is outdated");
        - bugItem(9446, "\".keys\" missing from properties table at http://dlang.org/hash-map.html");
        - bugItem(9503, "[grammar] template declaration/instance must take one or more arguments?");

    |!= h2(toc, "website-enhancement", "Website Enhancements")

    ul
        - bugItem(9302, "Document extern properly");

append extra-sidebar
    |!= toc.write("On This Page")
