extends base_changelog

append new_features
    ul
        li Add predefined Ddoc macro SRCFILENAME
        li Changed lexer to support # as a token, preserving #line's original behavior
        li added AES, PCLMULQDQ, RDRAND, AVX, VAES, VPCLMULQDQ, FMA, FP16C to core.cpuid
        - bugItem(435, "Constructors should be templatized");
        - bugItem(2367, "Overloading error with string literals");
        - bugItem(3382, "[tdpl] Implement uniform function call syntax");
        - bugItem(4536, "Typetuples (T...) should have an .init member");
        - bugItem(5525, "Eponymous templates should allow for overloaded eponymous members");
        - bugItem(7105, "relax inout rules");
        - bugItem(7833, "Changelog should clearly mention struct literal/opCmp/opEquals/toHash changes");
        li
            | Strive to make toHash, toString, opEquals and opCmp functions
            | pure, nothrow, const and @safe. Soon, this will become a
            | requirement.
        li
            | The deprecated std.date, std.dateparse, and std.gregorian
            | modules have been removed. Please use std.datetime instead.
        li Several deprecated functions in std.file have been removed.
        li
            | The old functions in std.path which were scheduled for
            | deprecation have now been deprecated. Please use the new ones
            | which were introduced in 2.055. However, note that curdir and
            | pardir do not have replacements, because they're "." and ".."
            | respectively on all OSes so variables for them were seen as
            | unnecessary. Also, one major change to note about the new
            | std.path functions is that when operating on extensions, they
            | expect "." to be part of the extension whereas the old ones did
            | not (e.g. "file.txt".extension == ".txt" whereas
            | "file.txt".getExt() == "txt").
        li
            | The version of std.exception.enforceEx which was scheduled for
            | deprecation has been deprecated. Please use the version which
            | takes exceptions which can be constructed with new E(msg, file,
            | line) (rather than just new E(msg) as the old version did).
            | That way, exceptions constructed with enforceEx will give the
            | file and line number where enforceEx was called.
        li Get rid of Win9x support.
        li
            - docLink("std.typecons");
            | &mdash; Added Proxy mixin template.
        li
            - docLink("std.format");
            | &mdash; Added documentation about compound format specifier.

append druntime_bugs_fixed

append library_bugs_fixed
    ul
        - bugItem(4604, "A stack overflow with writeln");
        - bugItem(5523, "std.regex handles \"\\s\" and \"\\W\" (etc.) inside square brackets improperly");
        - bugItem(5652, "Add \\p and \\P unicode properties to std.regex");
        - bugItem(5674, "AssertError in std.regex");
        - bugItem(5964, "std.stdio.readln can throw a UnicodeException");
        - bugItem(6217, "[GSOC] result of std.algorithm.map is not movable");
        - bugItem(6403, "Upgrade std.regex to Unicode UTS #18 Level 1 support");
        - bugItem(6892, "Formatted write with specified length of enum member");
        - bugItem(7111, "New regex engine cannot match beginning of empty string");
        - bugItem(7138, "Can't call array() on dirEntries");
        - bugItem(7264, "Can't iterate result from 4-arg dirEntries as string");
        - bugItem(7299, "std.uni missing doc comments");
        - bugItem(7300, "std.regex.ShiftOr!dchar.search is broken");
        - bugItem(7374, "stdin.byLine() throws AssertError on empty input");
        - bugItem(7460, "std.windows.registry reports a false exception message");
        - bugItem(7476, "Write(ln) functions no longer accept retro range");
        - bugItem(7628, "std.format formatValue incorrect overload");
        - bugItem(7674, "regex replace requires escaped format");
        - bugItem(7679, "std.regex.split and splitter don't work w/ ctRegex");
        - bugItem(7718, "regex and ctRegex produce different results");

append dmd_bugs_fixed
    ul
        li rdmd: --force now works with --eval
        li rdmd: update --eval's import list
        - bugItem(176, "[module] message \"module and package have the same name\"");
        - bugItem(783, "Cannot use an array w/ const or variable index as new[] size argument.");
        - bugItem(977, "Expressions inside a struct or array initializer get wrong line number");
        - bugItem(3279, "Confusing error message when comparing types");
        - bugItem(3354, "invalid number of args accepted for 1/2 arg floating point instructions");
        - bugItem(3509, "Cannot forward reference a template mixin's members in a compile-time context");
        - bugItem(3510, "Cannot forward reference a templated type from within a template mixin");
        - bugItem(3559, "DMD 1.048+ fails to take function pointer from overloaded member functions");
        - bugItem(3630, "bad error location in \"has no effect in expression\" error");
        - bugItem(3682, "Regression(2.038) is expression fails to match types");
        - bugItem(3812, "Missing line number for implicit cast of variadic function to array");
        - bugItem(3822, "Invalid optimization of alloca called with constant size");
        - bugItem(3927, "array.length++; is an error, but ++array.length compiles");
        - bugItem(4241, "duplicate union initialization error doesn't give a file location");
        - bugItem(4269, "Regression(2.031): invalid type accepted if evaluated while errors are gagged");
        - bugItem(4507, "use spellchecker when override function doesn't override anything");
        - bugItem(4820, "Regression(1.058, 2.044) in DStress caused by changeset 452");
        - bugItem(4854, "Regression(2.047, Mac 10.5 only) writefln Segmentation fault if no globals");
        - bugItem(4993, "Temporary values and opIndexAssign");
        - bugItem(5181, "Excess cast on in-place operation op= involving conversion");
        - bugItem(5412, "import wtf2");
        - bugItem(5554, "[qtd] Covariance detection failure");
        - bugItem(5590, "Regression(2.036) ICE(e2ir.c): when using .values on enum which is associative array");
        - bugItem(5733, "Calling opDispatch As Template Results in Compiler Infinite Loop");
        - bugItem(5879, "Not all frontend errors use stderr");
        - bugItem(5889, "Struct literal/construction should be rvalue (it binds to ref parameters)");
        - bugItem(6391, "Line-less error when passing the '.im' of floating pointer value by reference");
        - bugItem(6438, "[CTFE] wrong error \"value used before set\" when slicing =void array");
        - bugItem(6611, "better error message for array post increment/decrement");
        - bugItem(6681, "struct constructor call is converted to struct literal that breaks union initialization");
        - bugItem(6685, "Allow using \"with\" with rvalues");
        - bugItem(6699, "More cases of __error in error messages");
        - bugItem(6738, "Can't call templatized property function from within a struct/class method");
        - bugItem(6785, "Wrong error message from pragma(msg) of failed instantiation");
        - bugItem(6982, "immutability isn't respected on associative array assignment");
        - bugItem(7038, "Type mismatch with const struct");
        - bugItem(7110, "opSlice() & opIndex functions works unstable as template arguments");
        - bugItem(7288, "ICE(toir.c): with lambda return + auto");
        - bugItem(7353, "NRVO not properly working with inferred return type");
        - bugItem(7380, "Crash trying to use address of variable in struct constructor at module level");
        - bugItem(7399, "Broken import statement in trySemantic() causes silent compiler error");
        - bugItem(7406, "tuple foreach doesn't work with mixed tuples");
        - bugItem(7411, "Deduce base type from vector types in templates");
        - bugItem(7439, "Compound assignment causes segmentation fault");
        - bugItem(7452, "Function using enforce() cannot be inferred as @safe because of anonymous function due to lazy argument");
        - bugItem(7462, "Error message with _error_ in overridden function");
        - bugItem(7463, "Duplicated error message with bad template value parameter");
        - bugItem(7473, "[CTFE] Non-ref argument behaves as if it's a ref argument");
        - bugItem(7481, "Compiler should 'soldier on' after template errors");
        - bugItem(7493, "Initialization of void[][N]");
        - bugItem(7499, "ICE(cast.c line 1495) with lambda array");
        - bugItem(7500, "[ICE] (template.c line 5287) with immutable lambda function");
        - bugItem(7502, "2.056 regression: Assigning .init takes forever to compile for large structs");
        - bugItem(7504, "Cannot assign an object of type 'typeof(null)' to an array");
        - bugItem(7518, "std.array.empty doesn't work for shared arrays");
        - bugItem(7525, "[2.058 regression] Broken return type inference for delegate returns");
        - bugItem(7527, "[CTFE] Segfault when slicing a pointer at compile time");
        - bugItem(7536, "ctfeAdrOnStack triggered");
        - bugItem(7544, "ICE(interpret.c) Catching an exception with a null catch block");
        - bugItem(7545, "ICE(cast.c) Merge integral types through alias this");
        - bugItem(7547, "-deps output lists object as a top level module");
        - bugItem(7550, "Missing AVX instruction VPMULDQ");
        - bugItem(7552, "Cannot get and combine a part of overloaded functions");
        - bugItem(7554, "Immutable function pointer arguments too");
        - bugItem(7557, "Sea of errors after template failure");
        - bugItem(7562, "DMD crashes by using TemplateThisParameter");
        - bugItem(7563, "Class members with default template arguments have no type");
        - bugItem(7568, "pragma(msg) segfaults with an aggregate including a class.");
        - bugItem(7578, "ICE on indexing result of vararg opDispatch");
        - bugItem(7580, "Identity assignment of Nullable crashes dmd");
        - bugItem(7582, "Untyped nested delegate literals don't compile");
        - bugItem(7583, "[CTFE] ICE with tuple and alias this");
        - bugItem(7589, "__traits(compiles) does not work with a template that fails to compile");
        - bugItem(7592, "Conversion from ireal to ifloat broken when using xmm");
        - bugItem(7595, "Data being overwritten.");
        - bugItem(7608, "__traits(allMembers) is broken");
        - bugItem(7618, "delegate/function pointer call bypass parameter storage class");
        - bugItem(7621, "Immutable type equivalence problem");
        - bugItem(7633, "Missing CTFE error message");
        - bugItem(7639, "Undefined enum AA key crashes compiler");
        - bugItem(7641, "std.typecons.Proxy incorrectly allows implicit conversion to class");
        - bugItem(7643, "Whole tuple slice isn't resolved as expected");
        - bugItem(7649, "Bad lambda inference in default function argument");
        - bugItem(7650, "Bad lambda inference in associative array literal");
        - bugItem(7667, "ICE(interpret.c): 'ctfeStack.stackPointer() == 0'");
        - bugItem(7669, "Broken inout deduction with static array type");
        - bugItem(7670, "UFCS problem with @property and structs");
        - bugItem(7671, "Broken inout deduction of shared(inout(T[n])) from immutable(int[3])");
        - bugItem(7672, "Remove top const doesn't work for inout array type.");
        - bugItem(7681, "Regression(2.059head):ICE:opCatAssign(delegate) to undefined identifier");
        - bugItem(7682, "shared array type and \"cast() is not an lvalue\" error");
        - bugItem(7684, "IFTI and shared overload doesn't work");
        - bugItem(7694, "Internal error: e2ir.c 1251 when calling member function inside struct via alias param");
        - bugItem(7695, "Regression(2.058): ICE(mtype.c) on associative array with keys of struct type with const members");
        - bugItem(7698, "can't specialize parameterized template value");
        - bugItem(7699, "Cannot get frame pointer to in contract when compiling with -inline");
        - bugItem(7702, "opDispatch goes into infinite loop");
        - bugItem(7703, "[UFCS] explicit template function instantiation as property");
        - bugItem(7705, "lambda syntax doesn't allow some valid signatures");
        - bugItem(7713, "lambda inference doesn't work on template function argument");
        - bugItem(7722, "Refuse normal functions to be used as properties");
        - bugItem(7731, "Assertion failure: 't' on line 7911 in file 'mtype.c'");
        - bugItem(7732, "[CTFE] wrong code for a struct called AssociativeArray");
        - bugItem(7735, "Functions with variadic void[][]... arguments corrupt passed data");
        - bugItem(7742, "'More initializers than fields' error with correct number of fields");
        - bugItem(7743, "Parsing problem with nothrow delegate");
        - bugItem(7745, "Regression (1.x git-415e48a) Methods defined in external object files when a pointer to it is taken");
        - bugItem(7751, "[ICE] (Regression 2.059head) From auto and forward reference");
        - bugItem(7754, "static this() in template is stripped during header gen");
        - bugItem(7755, "regression(2.059head): ICE in glue.c");
        - bugItem(7757, "Inout function with lazy inout parameter doesn't compile");
        - bugItem(7761, "lambda expression doesn't parse attributes");
        - bugItem(7768, "More readable template error messages");
        - bugItem(7769, "relax inout rule doesn't work for template function");
        - bugItem(7722, "Refuse normal functions to be used as properties");
        - bugItem(7773, "UCFS syntax on built-in attributes too?");
        - bugItem(7781, "[CTFE] Segmentation fault on 'mixin({return;}());");
        - bugItem(7782, "[ICE] With wrong import syntax");
        - bugItem(7785, "[CTFE] ICE when slicing pointer to variable");
        - bugItem(7786, "dmd crashes with invalid module name");
        - bugItem(7789, "[CTFE] null pointer exception on setting array length");
        - bugItem(7794, "Sea of errors when calling regex() after compile error");
        - bugItem(7808, "Nullable's alias this does not work with structs containing classes");
        - bugItem(7812, "Segfault on invalid code during template match deduction with errors gagged");
        - bugItem(7814, "Regression(2.059head) ICE(tocsym.c) using scope(failure) within foreach-range");
        - bugItem(7815, "Mixin template forward reference (?) regression");
        - bugItem(7820, "regression(DMD 2.059head) Wrong error on forward reference to 'front' with -property switch");
        - bugItem(7823, "Can't use a struct initializer to initialize a nested enum used as a default function argument initializer");
        - bugItem(7826, "[D2 Beta] Cannot use getHash in toHash without a warning");
        - bugItem(7843, "Regression(2.059 beta): Informational warning fails to produce executable");
        - bugItem(7857, "File#write formats enum as a boolean.");
        - bugItem(7858, "__traits(getOverloads) returns incorrect symbol");
        - bugItem(7859, "Crash on invalid alias template parameter type");
        - bugItem(7861, "Segfault during __error propagation with self-referencing module");
        - bugItem(7862, "Accepts-invalid template forward reference bug related to derivedMembers");
        - bugItem(7868, "derivedMembers/static if regression");
        - bugItem(7869, "Cannot format pointer of struct has toString member function");
        - bugItem(7871, "RangeViolation with findSplitBefore");
        - bugItem(7873, "[2.059 beta] IFTI with inout does not properly match template parameter if called from inout function for pointers");
        - bugItem(7886, "derivedMembers infinite recursion");
        - bugItem(7888, "derivedMembers forward reference error with nested imports");
