extends base_changelog

append new_features
    ul
        li
            - docLink("std.string");
            | &mdash; The current implementations of std.string.format and
            | string.sformat are scheduled to be replaced in November 2012
            | with improved implementations which conform to writef. In some,
            | rare cases, this will break code. Please see the documentation
            | for std.string.format and std.string.sformat for details.
        li
            - docLink("std.bitmanip");
            | &mdash; Added peek, read, write, and append for converting
            | ranges of bytes to and from integral types.
        li
            - docLink("std.container");
            | &mdash; Added DList, which is an implementation of a
            | doubly-linked list.
        li
            - docLink("std.file");
            | &mdash; Added std.file.tempDir which returns the path to
            | a directory where a program can put temporary files.
        li
            - docLink("std.process");
            | &mdash; Added escapeShellCommand, escapeShellFileName, and
            | escapeWindowsArgument. Documented browse function.
        li
            - docLink("std.range");
            | &mdash; Added RefRange, which effectively makes it possible to
            | pass a range by reference.
        li
            - docLink("std.traits");
            ul
                li
                    | Added KeyType, ValueType, isScalarType, isBasicType,
                    | and SetFunctionAttributes templates.
                li
                    | areAllSafe has been scheduled for deprecation.
                    | Please use allSatisfy(isSafe, ...) instead.
        li
            - docLink("std.utfs");
            | &mdash; Added overload of codeLength which operates on a string.
        li
            | clear has been renamed to destroy, and clear
            | (as an alias to destroy) has been scheduled for deprpecation.
        li
            | Capitalized std.traits.pointerTarget to PointerTarget.
            | Old one is scheduled for deprecation.
        li
            | std.algorithm.indexOf - which was scheduled for deprecation -
            | has been deprecated (it was easily confused with
            | std.string.indexOf). Please use countUntil instead.
        li
            | std.cpuid - which was scheduled for deprecation - has been
            | deprecated. Please use core.cpuid instead.
        li
            | std.conv.ConvError and ConvOverflowException - which were
            | scheduled for deprecation - have been deprecated. Please catch
            | ConvException and ConvOverflowException instead.
        li
            | The overloads of std.conv.to which were scheduled for
            | deprecation because formattedWrite replaced them have now been
            | deprecated. Please use std.format.formattedWrite instead.
        li
            | The overload of std.exception.enforce which takes the file and
            | line number as template arguments has been scheduled for
            | deprecation (as it causes unnecessary template bloat). Please
            | use the overload which takes them as function arguments instead.
            | This will have no effect on any calls to enforce which do not
            | explicitly pass the file or line number.
        li
            | std.format.FormatError - which was scheduled for deprecation -
            | has been deprecated. Please catch FormatException instead.
        li
            | std.file.listDir has been deprecated. Please use
            | std.file.dirEntries instead.
        li
            | std.range.replicate - which was scheduled for deprecation -
            | has been deprecated. Please use repeat instead.
        li
            | std.range.SortedRange.canFind - which was scheduled for
            | deprecation - has been deprecated. Please use
            | SortedRange.contains instead.
        li
            - docLink("std.socket");
            | &mdash; timeval and linger - which were scheduled for
            | deprecation - have been deprecated. Please use TimeVal and
            | Linger.
        li
            | std.stdio.isStreamingDevice has been scheduled for deprecation.
            | Please use isFileHandle instead.
        li The deprecated std.typecons.defineEnum has been removed.
        li
            | UtfException - which was scheduled for deprecation -
            | has been deprecated. Please use UTFException instead.
        li
            | The deprecated overloads of std.array.insert and
            | std.array.replace have been removed. Please use insertInPlace
            | and replaceInPlace instead.
        li
            | The deprecated toISOExtendedString and fromISOExtendedString
            | functions in std.datetime have been removed. Please use
            | toISOExtString and fromISOExtString instead.
        li
            | The deprecated std.file.getTimesPosix has been removed.
            | Please use std.file.getTimes instead.
        li
            | The deprecated overloads of isFile, isDir, and isSymLink in
            | std.file which took uint have been removed. Please use
            | attrIsFile, attrIsDir, and attrIsSymlink instead.
        li
            | The deprecated std.file.DirEntry.timeStatusChanged has been
            | removed. Please use std.file.DirEntry.attributes to get at that
            | information if you need it.
        li
            | The deprecated std.contracts module has been removed.
            | Please use std.exception instead.
        li
            | The deprecated std.arg, std.bind, and std.loader modules
            | have been removed.
        li
            | Added TypeInfo.rtInfo property to get library defined
            | runtime info.
        li Added front end support for AVX 256 bit SIMD instructions.
        li
            | Default arguments and parameter identifiers (if any) are
            | added to the tuple generated from IsExpression's __parameters
            | case.
        li
            | Changed the way the align attribute works, to make it more
            | usable and comprehensible. Default alignment has not changed.
        li
            | The align attribute now accepts arbitrary powers of two.
            | This affects layout of static data, too. Such effects are
            | dependent on limitations of the object file format - currently
            | Win32 programs cannot align on larger than 16 byte boundaries.
        li HTML input file support completely removed.
        - bugItem(3150, "cast from dynamic array to ulong is allowed");
        - bugItem(3866, "anonymous delegate with default parameters cross-talks to another anonymous delegate");
        - bugItem(4174, "Template interface functions not allowed, making operator overloads difficult");
        - bugItem(6652, "1. Warn modifying non ref variable if -w is specified.");
        - bugItem(7243, "Compiler should call separate function when allocating a struct on the heap");
        - bugItem(7923, "Please remove 'deprecated' from setAssertHandler()");
        - bugItem(8105, "in ref");
        - bugItem(8127, "dmd link library paths not given precedence over gcc defaults");
        - bugItem(8221, "typeof(null) rejected as return type for covariant overrides");

append druntime_bugs_fixed
    ul
        - bugItem(6909, "incorrect definition of the OVERLAPPED struct in core.sys.windows.windows ?");

append library_bugs_fixed
    ul
        - bugItem(2328, "setTypeInfo in gc.d backwards.");
        - bugItem(2588, "std.signals should not use 'length' stealth keyword in indexing");
        - bugItem(4405, "all function - returns whether predicate is true for all elements in a range");
        - bugItem(4603, "array(iota(1, 0)) error");
        - bugItem(4605, "Wrong print of an int[string] aa");
        - bugItem(4629, "BufferedFile.printf() wants char[] as first argument");
        - bugItem(4695, "std.range.zip is broken");
        - bugItem(4744, "std.conv: string->enum doesn't look for longer match");
        - bugItem(4822, "Problem with std.stdio.File.writef(\"%c\")");
        - bugItem(5011, "std.container: SList linearRemove produces wrong results");
        - bugItem(5089, "feqrel does not compile for floats");
        - bugItem(5260, "std.math.feqrel() returns negative number");
        - bugItem(5346, "instantiation of std.conv.toImpl and std.format.formatValue fails for unions");
        - bugItem(5354, "formatValue: range templates introduce 3 bugs related to class & struct cases");
        - bugItem(5786, "std.algorithm.sort does not work with std.container.Array: Range violation");
        - bugItem(5843, "Unable to convert a struct with an alias-this to long/ulong to int, using std.conv.to!int.");
        - bugItem(5970, "fix BigInt.toString");
        - bugItem(6027, "bigint to!string conversion and its implications");
        - bugItem(6175, "String corruption when passing static char arrays to std.conv");
        - bugItem(6191, "removechars doesn't accept a const string");
        - bugItem(6197, "std.traits.isImplicitlyConvertible returns some wrong results.");
        - bugItem(6222, "A problem with iota() using size_t");
        - bugItem(6231, "[patch] std.conv.to/std.format.: Structs with toString and isInputRange match multiple templates.");
        - bugItem(6273, "Tuple [] operator in pure function");
        - bugItem(6379, "std.container.SList fails to compile");
        - bugItem(6437, "Refcounted calls dtor before ctor, never calls dtor for globals");
        - bugItem(6547, "Call to std.algorithm.remove causes compile error");
        - bugItem(6580, "scoped classes are aligned incorrectly");
        - bugItem(6597, "to!SomeString should use std.format.formatValue");
        - bugItem(6642, "SysTime should not be hasUnsharedAliasing");
        - bugItem(6892, "Formatted write with specified length of enum member");
        - bugItem(6926, "std.process.system return wrong exit code");
        - bugItem(7022, "File.byLine doesn't release file handle");
        - bugItem(7138, "Can't call array() on dirEntries");
        - bugItem(7317, "writeln cannot handle alias this of array type");
        - bugItem(7326, "write interprets enum with byte backing type as a character");
        - bugItem(7348, "to!string(null) matches more than one template declaration");
        - bugItem(7356, "Implement KeyType, ValueType for hashes in std.traits");
        - bugItem(7360, "Predicate templates in std.traits should consider alias this");
        - bugItem(7515, "The new std.string.translate is slow for ASCII text");
        - bugItem(7537, "`File.tmpfile` requires administrator rights on Windows");
        - bugItem(7561, "std.net.curl broken");
        - bugItem(7660, "toImpl conflict in std.conv");
        - bugItem(7796, "std.typecons.Unique is using writeln without importing std.stdio");
        - bugItem(7824, "isInputRange fails to recognize inout(T)[]");
        - bugItem(7831, "Unlisted @@@BUG in File.detach causes FILE* leaks when reopening");
        - bugItem(7878, "A problem with purity and general templated algorithms");
        - bugItem(7898, "[CTFE] std.algorithm:copy fails when used with two arrays");
        - bugItem(7909, "to!(enum)(string) and to!(string)(enum) break when enum is integral");
        - bugItem(7919, "Sample code works on GDC but fails with DMD");
        - bugItem(7936, "std.random.randomSample always returns the same first value when passed a random number generator");
        - bugItem(7937, "Range iota.Result should be const where possible");
        - bugItem(7944, "std.range.iota.popFront() cycles when the range is empty");
        - bugItem(7948, "std.range.zip broken with requireSameLength");
        - bugItem(7962, "std.regex: Captures.length() returns incorrect value");
        - bugItem(7973, "BigInt %= long/ulong gives wrong value");
        - bugItem(7975, "Incorrect quotes escaping in std.format");
        - bugItem(7982, "iota broken when start and end are unsigned and step is negative.");
        - bugItem(7993, "BigInt divide-by-1 error");
        - bugItem(8003, "Phobos uses deprecated std.path sep symbol");
        - bugItem(8011, "BigInt ++ and -- do wrong thing on negative numbers");
        - bugItem(8015, "std.typecons.Tuple does not support struct with alias method this");
        - bugItem(8022, "BigInt division bug (2)");
        - bugItem(8026, "Fix or disallow randomShuffle() on fixed-sized arrays");
        - bugItem(8031, "If a class have some signals it's impossible for a derived class to have any signals");
        - bugItem(8037, "hasElaborateDestructor is false for non-zero-length static array of structs with elaborate destructor");
        - bugItem(8039, "`scoped` doesn't call any elaborate destructors for struct fields");
        - bugItem(8040, "writeln(null) too");
        - bugItem(8055, "[Regression 2.059] std.algorithm.move corrupts moved object field");
        - bugItem(8057, "std.algorithm.move cannot use for nested struct");
        - bugItem(8080, "'alias this' causes toString to be shadowed by aliased object");
        - bugItem(8112, "std.algorithm.fill must accept InputRange");
        - bugItem(8158, "std.algorithm.min fails to compile with user-defined types");
        - bugItem(8164, "BigInt from char[] too");
        - bugItem(8165, "BigInt opAssign return value");
        - bugItem(8171, "[Regression 2.060head] Broken std.algorithm.move for nested struct has no member");
        - bugItem(8186, "Formatting class object has an alias this to int* field is broken.");
        - bugItem(8187, "replaceFirst doesn't work for string[] haystack");
        - bugItem(8191, "cstream.printf is completely unusable on x86_64");
        - bugItem(8195, "Segfault when comparing a VariantN to a non-variant type which it holds");
        - bugItem(8203, "Use of std.regex.match() generates \"not enough preallocated memory\" error");
        - bugItem(8214, "blocking option for TaskPool.finish()");
        - bugItem(8233, "std.array.array fails to compile with ranges of immutable elements which have a length property");
        - bugItem(8240, "std.algorithm.joiner and empty inputRangeObject");
        - bugItem(8264, "[std.conv.to] constructing conversion doesn't work with alias this");
        - bugItem(8310, "writeln of Range of fixed size array");
        - bugItem(8323, "std.string.chompPrefix does not handle differing string types properly");
        - bugItem(8362, "std.traits.isSafe doesn't work with unsafe lamdba functions");
        - bugItem(8386, "writeln stopped working with wstring");
        - bugItem(8398, "enforceEx cannot be used with OutOfMemoryError");
        - bugItem(8450, "std.traits.isSafe doesn't work with unsafe lamdba functions");

append dmd_bugs_fixed
    ul
        - bugItem(1175, "nested class inheritance");
        - bugItem(1780, "Type tuple deduction failure for class templates");
        - bugItem(2472, "Delegates are not lvalue.");
        - bugItem(2962, "ICE(glue.c) or bad codegen passing variable as template value parameter");
        - bugItem(3290, "accepts-invalid: non-const by-ref foreach over a const array is accepted");
        - bugItem(3574, "post-condition in void main() is not evaluated if there is no return statement");
        - bugItem(3608, "Allow isExpression and templates to capture template parameters and FQN of template");
        - bugItem(3703, "static array assignment");
        - bugItem(3895, "Appending a double[] to a float[] generates wrong code");
        - bugItem(4024, "Last catch only accepts block statement");
        - bugItem(4155, "return of NaN to temporary fails equality test");
        - bugItem(4288, "Error on passing delegate to C linkage function");
        - bugItem(4364, "ICE(class.c) compiling a struct def named 'Object' followed by a class definition");
        - bugItem(4510, "[tdpl] ref with a wrong type specifier is accepted");
        - bugItem(4583, "PIC code not working: EBX register set incorrectly");
        - bugItem(4785, "auto return of a function with in contract");
        - bugItem(4884, "Using template struct parameters in method definition fails with \"parameter _param_0 is already defined\"");
        - bugItem(4953, "Regression(2.031): templates don't do implicit conversion properly");
        - bugItem(4967, "member default initializers not working in static struct initializers");
        - bugItem(5039, "Cannot use invariant() with auto methods");
        - bugItem(5082, "delegate alias parameters are silently accepted inside structs. limits most of std.algorithm, etc.");
        - bugItem(5435, "Static foreach over tuple ignores type annotation");
        - bugItem(5437, "Problems with length of std.traits.EnumMembers");
        - bugItem(5473, "Members of const-qualified classes are not const themselves.");
        - bugItem(5737, "postblit not called for locals initialized from ref functions");
        - bugItem(5809, "[64 bit] wrong code for *p==0, when widening conversion occurs");
        - bugItem(5896, "const overload matching is succumb to template parameter one");
        - bugItem(6189, "[64bit] optimizer: register content destroyed in function prolog");
        - bugItem(6199, "[GSoC] Postblit not called when returning a reference to a by-value function");
        - bugItem(6470, "postblits not called on arrays of structs");
        - bugItem(6475, "template identifier is not a member of alias");
        - bugItem(6591, "di header generation loses selective import symbols");
        - bugItem(6612, "Associative arrays with associative array keys literals");
        - bugItem(6636, "Destructors of static array elements are not called on function parameter");
        - bugItem(6637, "Postblits of static array elements are not called on function argument");
        - bugItem(6758, "std.c.stdarg problems with 8 or more integer arguments on x86_64");
        - bugItem(6891, "template with uint value parameter causes several issues");
        - bugItem(7396, "Indicate default alignment with 0.");
        - bugItem(7385, "Bad error message missing line number on invalid array op that isn't special cased");
        - bugItem(7413, "Vector literals don't work");
        - bugItem(7414, "Vector literal assignment doesn't work in global scope");
        - bugItem(7418, "Overloading doesn't work with aliases declared inside templates");
        - bugItem(7453, "Can't return value from within opApply");
        - bugItem(7478, "stack overflow compiling with -deps -release -inline -noboundscheck");
        - bugItem(7494, "Selective import does not work inside a function");
        - bugItem(7506, "Postblit does not called properly with inlining");
        - bugItem(7530, "Postblit not called structs returned from an array index expr.");
        - bugItem(7560, "Base class overloaded methods created by mixins can't be overriden");
        - bugItem(7581, "Compiler uses wrong instructions to move complex value from ST to xmm registers");
        - bugItem(7585, "functions in templates inferred as delegate");
        - bugItem(7750, "while(true) loop with try/catch block causes segfault");
        - bugItem(7770, "__dollar cannot be read at compile time");
        - bugItem(7784, "ICE with self-referencing literals");
        - bugItem(7793, "static assert( void_function() ) gives misleading error message");
        - bugItem(7807, "Ambiguous virtual function error on const overloading with covariant return types");
        - bugItem(7851, "Internal error: e2ir.c 688");
        - bugItem(7880, "[CTFE] cast from void array allowed with different results than at runtime");
        - bugItem(7893, "Spec completely wrong for D variadic arguments on 64 bits");
        - bugItem(7894, "[CTFE] - goto within ForStatement restarts loop");
        - bugItem(7906, "[ICE] enum declaration with invalid array literal crashes dmd");
        - bugItem(7907, "[ICE] invalid expression on template argument crashes dmd");
        - bugItem(7911, "Nested static if failing to execute");
        - bugItem(7922, "alias this causes weird formatting issues for strings");
        - bugItem(7929, "Broken semantic of StructInitializer with const");
        - bugItem(7931, "Error message with _error_ with var[1,2]");
        - bugItem(7932, "Corrupted argument inside out contract in x86_64");
        - bugItem(7933, "Illegal interaction of templates");
        - bugItem(7941, "Regression(2.059): Type check is ignored when manifest constant initializer is function literal");
        - bugItem(7943, "UFCS does not work with alias this");
        - bugItem(7945, "alias this doesn't work on function ref parameter");
        - bugItem(7949, "[ICE] (cgcod.c) with SIMD array");
        - bugItem(7950, "Type tuples are incorrectly flattened in base type list of interface");
        - bugItem(7951, "DMD: Internal error: backend/cgxmm.c 567");
        - bugItem(7965, "Invalid outer function scope pointer in some cases");
        - bugItem(7974, "forward reference of mixin declaration");
        - bugItem(7983, "ICE with getMember on a unittest member");
        - bugItem(7987, "[CTFE] cannot compare arrays of slices");
        - bugItem(8002, "Excess initial errors when passing template args to non-templated struct");
        - bugItem(8004, "Direct call of function literal should consider default arguments");
        - bugItem(8005, "Lambda with parameter type inference should consider default args");
        - bugItem(8016, "Methods defined in external object files when template alias parameter is involved");
        - bugItem(8032, "`mixin template` before virtual method with same method causes an error");
        - bugItem(8036, "Zero-length static array of structs with elaborate destructor as struct or class field is rejected");
        - bugItem(8038, "#line which is in a double template instantiation doesn't work");
        - bugItem(8060, "xmmstore cannot allocate store for optimized operation that uses int and floats");
        - bugItem(8064, "return reference semantics not obeyed on delegates?");
        - bugItem(8066, "ICE on missing return statement if invariant is present");
        - bugItem(8069, "incorrect ambiguous virtual function error");
        - bugItem(8073, "Regression (git) Error: undefined identifier __result");
        - bugItem(8089, "Importing package as module causes segfault");
        - bugItem(8091, "Optimizer generates wrong code when reducing comparisons");
        - bugItem(8094, "Static if matching using alias parameter in template fails");
        - bugItem(8095, "[64 bit] Wrong code generation with spilled register, -m64 -O");
        - bugItem(8098, "Inner class method can modify outer's members regardless of constancy");
        - bugItem(8099, "Inner class's outer pointer matches constancy of inner, but can be set to object of arbitrary constancy");
        - bugItem(8182, "with a lazy struct parameter, the struct's destructor is called on the generated delegate");
        - bugItem(8180, "UFCS writeln doesn't work with Tuples");
        - bugItem(8113, "alias this doesn't forward opCall");
        - bugItem(8123, "alias declaration lookup is broken");
        - bugItem(8125, "TypeInstance dedunction problem");
        - bugItem(8129, "Cannot deduce template function when using partially specified type in function parameter");
        - bugItem(8147, "Blah!R.init now requires parens - (Blah!R).init");
        - bugItem(8168, "dmd crashes when asm statement with wrong opcode");
        - bugItem(8169, "Method loses its compile-time evaluability when used through alias this");
        - bugItem(8185, "Pure functions and pointers");
        - bugItem(8188, "need this to access member when mixining in a function");
        - bugItem(8190, "Externally defined struct error message");
        - bugItem(8194, "\"Function cannot access frame\" even though all I requested was the type");
        - bugItem(8198, "Nested lambda inference doesn't work");
        - bugItem(8199, "stack is not aligned in finally block");
        - bugItem(8212, "shared value data structures should implicitly cast to mutable");
        - bugItem(8216, "CTFE should allow 'pointer is inside range' comparisons");
        - bugItem(8226, "Global lambda assign to const/immutable");
        - bugItem(8237, "Error message with _error_ when using failed type inference in template parameter");
        - bugItem(8241, "cannot use template function literal as default alias argument");
        - bugItem(8242, "cannot use template function literals at module scope");
        - bugItem(8249, "Spurious error message with templates and alias this");
        - bugItem(8252, "no UFCS for 0 literal");
        - bugItem(8276, "[CTFE] ICE when reading variable from nested function");
        - bugItem(8283, "ICE(cod1.c): returning struct with constructor as member of another struct");
        - bugItem(8315, "Invalid nested-ref check in template constraint");
        - bugItem(8335, "`ref` is ignored for static array of stucts with postblit argument");
        - bugItem(8390, "Refused array operation mutable[] += const[]");
        - bugItem(8397, "parameter types are not checked when assigning a function literal");
        - bugItem(8423, "Wrong code for bool parameter in 5th integer register.");
        - bugItem(8429, "[2.060 beta] 'version' rejected inside 'static if's");
        - bugItem(8434, "[Regression 2.058] cannot implicitly convert expression (vs1.opCast()) of type const(Vector2D) to object.Object");
        - bugItem(8437, "[2.060 beta] static struct no size yet for forward reference");
        - bugItem(8442, "[2.060 beta] Empty array enum not treated as immutable");
        - bugItem(8453, "Associative array keys refused as property by sort");
        - bugItem(8454, "[ICE] (backend\\cg87.c 3497) with cdouble and sqrt");
